



import os
import cv2
import numpy as np

def preprocess_image(image):
    """
    Applies CLAHE preprocessing to enhance image contrast.
    """
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    clahe = cv2.createCLAHE(clipLimit=1.5, tileGridSize=(16, 16))
    return clahe.apply(gray)

# Load and preprocess the sample image
sample = cv2.imread("SOCOFing/Altered/Altered-Easy/515__M_Left_little_finger_Obl.BMP")
if sample is None:
    raise FileNotFoundError("Sample image not found.")
sample = cv2.resize(sample, None, fx=2.5, fy=2.5)
sample_preprocessed = preprocess_image(sample)  










# For visualization
sift = cv2.SIFT_create()
keypoints_1, descriptors_1 = sift.detectAndCompute(sample, None)

# Variables to track the best match
best_score = 0
filename = None
image = None
kp1, kp2, mp = None, None, None

# Counter for progress tracking
counter = 0

# Iterate through the fingerprint images in the Real folder
for file in [file for file in os.listdir("SOCOFing/Real")][:6000]:
    counter += 1
    if counter % 10 == 0:
        print(f"Processing {counter}: {file}")
    
    fingerprint_image = cv2.imread(f"SOCOFing/Real/{file}")
    if fingerprint_image is None:
        print(f"Could not load image: {file}")
        continue
    
    # Preprocess fingerprint image
    fingerprint_preprocessed = preprocess_image(fingerprint_image)
    keypoints_2, descriptors_2 = sift.detectAndCompute(fingerprint_image, None)
    
    # Skip if no descriptors are found
    if descriptors_1 is None or descriptors_2 is None:
        print(f"No descriptors found for {file}. Skipping.")
        continue
    






    # Use FLANN-based matcher
    flann = cv2.FlannBasedMatcher({'algorithm': 1, 'trees': 10}, {})
    matches = flann.knnMatch(descriptors_1, descriptors_2, k=2)
    
    # Apply ratio test
    match_points = [p for p, q in matches if p.distance < 0.2 * q.distance]
    
    # Filter matches using homography
    if len(match_points) > 4:
        src_pts = np.float32([keypoints_1[m.queryIdx].pt for m in match_points]).reshape(-1, 1, 2)
        dst_pts = np.float32([keypoints_2[m.trainIdx].pt for m in match_points]).reshape(-1, 1, 2)
        H, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC, 5.0)
        if mask is not None:
            match_points = [m for m, v in zip(match_points, mask.ravel()) if v == 1]







    
    # Calculate match percentage
    keypoints = min(len(keypoints_1), len(keypoints_2))
    if keypoints > 0:
        match_score = len(match_points) / keypoints * 100
        if match_score > best_score:
            best_score = match_score
            filename = file
            image = fingerprint_image
            kp1, kp2, mp = keypoints_1, keypoints_2, match_points






            

# Display the best match result
if filename is not None:
    print("BEST MATCH: " + filename)
    print("SCORE: " + str(best_score))
    
    # Draw matches
    result = cv2.drawMatches(sample, kp1, image, kp2, mp, None, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)
    result = cv2.resize(result, None, fx=4, fy=4)
    
    # Save and display the result
    cv2.imwrite("result.jpg", result)
    cv2.imshow("RESULT", result)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
else:
    print("BEST MATCH: No valid filename found.")
